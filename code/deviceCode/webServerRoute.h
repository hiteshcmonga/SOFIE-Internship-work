
#include "WiFi.h"
#include "ESPAsyncWebServer.h"
#include "AsyncJson.h"
#include "ArduinoJson.h"

const char* ssid = "hcm"; // your ssid
const char* password =  "hcm12345"; // your password
String devicevc;
String clientvc;
// async web server so that GET and POST requests are handled simultaneously
AsyncWebServer server(80);

void receiveVC() {
  // route to receive & handle VC generated by owner
  AsyncCallbackJsonWebHandler *handler = new AsyncCallbackJsonWebHandler("/devicevc", [](AsyncWebServerRequest * request, JsonVariant & json) {
    StaticJsonDocument<1000> data;
    if (json.is<JsonArray>())
    {
      data = json.as<JsonArray>();
    }
    else if (json.is<JsonObject>())
    {
      data = json.as<JsonObject>();
    }

    // how challenge needs to be assigned this can be discussed,
    // this is just for demonstration and testing
    JsonArray deviceChallenge= data.createNestedArray("deviceChallenge");
    deviceChallenge.add("1234567");
    JsonArray clientChallenge= data.createNestedArray("clientChallenge");
    clientChallenge.add("12345");
    serializeJson(data, devicevc);
    
    request->send(200, "application/json", devicevc); 
    Serial.println(devicevc);
    // the page becomes unresponsive if handlers and routes are compiled in a different function.
  });
  server.addHandler(handler);
}


void sendDeviceVC(){
  server.on("/senddevicevc", HTTP_GET, [](AsyncWebServerRequest * request) {
    request->send(200, "text/plain", devicevc);
});
}

void sendDid() {
  // GET route, to publish device's DID

  server.on("/devicedid", HTTP_GET, [](AsyncWebServerRequest * request) {
    request->send(200, "application/json", didKey);
  });
}

// not yet tested 
void receiveClientVC() {
  // GET route, to publish device's DID
AsyncCallbackJsonWebHandler *handler = new AsyncCallbackJsonWebHandler("/receiveclientvc", [](AsyncWebServerRequest * request, JsonVariant & json) {
    StaticJsonDocument<1000> data;
    if (json.is<JsonArray>())
    {
      data = json.as<JsonArray>();
    }
    else if (json.is<JsonObject>())
    {
      data = json.as<JsonObject>();
    }
    
    request->send(200, "application/json", clientvc); 
    Serial.println(clientvc);
  });
  server.addHandler(handler);
}
